<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sherspidey.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sherspidey.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2025-03-27T17:41:47+08:00</updated><id>https://sherspidey.github.io/feed.xml</id><title type="html">Paradox’s blog</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">暂定粗略学习计划</title><link href="https://sherspidey.github.io/blog/2025/%E7%B2%97%E7%95%A5%E8%AE%A1%E5%88%92/" rel="alternate" type="text/html" title="暂定粗略学习计划"/><published>2025-03-26T17:30:00+08:00</published><updated>2025-03-26T17:30:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/%E7%B2%97%E7%95%A5%E8%AE%A1%E5%88%92</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/%E7%B2%97%E7%95%A5%E8%AE%A1%E5%88%92/"><![CDATA[<h2 id="工作时间利用优化"><strong>工作时间利用优化</strong></h2> <h3 id="工作日学习分配"><strong>工作日学习分配</strong></h3> <ul> <li><strong>上午工作时段</strong>： <ul> <li>VSG/Vulkan深入学习（与工作直接相关）</li> <li>图形学理论研究（可合理解释为工作需要）</li> <li>记录工作中解决的渲染问题和解决方案</li> </ul> </li> <li><strong>午休时间</strong>： <ul> <li>阅读图形学相关论文或博客</li> <li>观看简短的技术教程视频</li> </ul> </li> <li><strong>下午工作时段</strong>： <ul> <li>将所学理论应用到工作项目中</li> <li>创建小型测试用例验证新理解的概念</li> </ul> </li> <li><strong>晚上时间</strong>： <ul> <li>专注于游戏引擎学习（Unreal/Defold）</li> <li>个人项目开发</li> </ul> </li> </ul> <h3 id="周末时间分配"><strong>周末时间分配</strong></h3> <ul> <li><strong>上午</strong>：核心项目开发</li> <li><strong>下午</strong>：新技术探索和实验</li> <li><strong>晚上</strong>：规划和总结</li> </ul> <h2 id="学习计划"><strong>学习计划</strong></h2> <h3 id="第一阶段vulkanvsg与图形学基础"><strong>第一阶段：Vulkan/VSG与图形学基础</strong></h3> <h4 id="月度1vulkan与vsg深入理解"><strong>月度1：Vulkan与VSG深入理解</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>VSG架构分析和源码阅读</li> <li>Vulkan规范学习</li> <li>在工作项目中实践探索</li> </ul> <p><strong>下班后：</strong></p> <ul> <li>更深入的Vulkan概念研究</li> <li>图形学理论补充</li> </ul> <p><strong>周末项目：</strong></p> <ul> <li>Vulkan渲染器项目，不使用VSG，纯Vulkan实现</li> </ul> <p><strong>第1周：VSG核心概念分析</strong></p> <ul> <li>周末目标：理解VSG架构设计与Vulkan的关系</li> </ul> <p><strong>第2周：渲染管线实现</strong></p> <ul> <li>周末目标：使用Vulkan实现基础渲染管线，对比VSG实现方式</li> <li><strong>具体实现方式</strong>：使用纯Vulkan API创建实例、设备、渲染通道和管线，绘制基本三角形</li> </ul> <p><strong>第3周：资源管理系统</strong></p> <ul> <li>周末目标：实现Vulkan缓冲区和图像资源管理</li> <li><strong>具体实现方式</strong>：创建自己的资源抽象类，封装Vulkan缓冲区和图像资源的创建、使用和销毁</li> </ul> <p><strong>第4周：场景图概念</strong></p> <ul> <li>周末目标：设计简单场景图系统与VSG对比</li> <li><strong>具体实现方式</strong>：创建基础场景图结构，实现节点层次和变换继承</li> </ul> <h4 id="月度2vulkan进阶与diligent-engine"><strong>月度2：Vulkan进阶与Diligent Engine</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>VSG高级特性研究</li> <li>CAD渲染优化技术</li> </ul> <p><strong>下班后：</strong></p> <ul> <li>Diligent Engine文档和示例</li> </ul> <p><strong>周末项目：</strong></p> <ul> <li>基于Diligent Engine的渲染器原型</li> </ul> <p><strong>第1周：Vulkan描述符与资源绑定</strong></p> <ul> <li>周末目标：深入理解描述符系统</li> <li><strong>具体实现方式</strong>：使用Diligent Engine实现灵活的材质系统，并与纯Vulkan实现对比</li> </ul> <p><strong>第2周：Vulkan多线程渲染</strong></p> <ul> <li>周末目标：研究多线程命令缓冲区记录</li> <li><strong>具体实现方式</strong>：使用Diligent Engine实现多线程渲染，观察其如何封装Vulkan同步原语</li> </ul> <p><strong>第3周：高级着色器技术</strong></p> <ul> <li>周末目标：实现计算着色器和高级特效</li> <li><strong>具体实现方式</strong>：使用HLSL编写计算着色器，通过Diligent Engine编译为SPIRV并执行</li> </ul> <p><strong>第4周：渲染架构比较</strong></p> <ul> <li>周末目标：分析VSG、纯Vulkan和Diligent Engine的设计差异</li> <li><strong>具体实现方式</strong>：创建一个技术报告，包含代码示例和架构图</li> </ul> <h4 id="月度3计算机图形学与渲染技术"><strong>月度3：计算机图形学与渲染技术</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>工作项目中应用的图形学理论</li> <li>GAMES101课程内容（可解释为工作需要的理论学习）</li> </ul> <p><strong>下班后：</strong></p> <ul> <li>实现核心渲染算法</li> <li><strong>同时开始Unreal与Defold入门</strong></li> </ul> <p><strong>第1-2周：光栅化与着色模型</strong></p> <ul> <li>周末目标：实现软光栅化器与基础着色模型</li> <li><strong>交叉学习</strong>：Unreal基础入门（2小时）+ Defold环境设置（1小时）</li> </ul> <p><strong>第3-4周：纹理映射与光照</strong></p> <ul> <li>周末目标：实现纹理系统与基础光照</li> <li><strong>交叉学习</strong>：Unreal蓝图基础（2小时）+ Defold游戏对象（1小时）</li> </ul> <h3 id="第二阶段unreal与defold并行学习"><strong>第二阶段：Unreal与Defold并行学习</strong></h3> <h4 id="月度4-6unreal与defold基础"><strong>月度4-6：Unreal与Defold基础</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>继续深化VSG/Vulkan知识</li> <li>将图形渲染原理与工作项目关联</li> </ul> <p><strong>工作日晚间：</strong></p> <ul> <li>周一、三、五：Unreal Engine学习（每次2小时）</li> <li>周二、四：Defold学习（每次2小时）</li> </ul> <p><strong>周末：</strong></p> <ul> <li>周六：Unreal项目开发（4-5小时）</li> <li>周日：Defold项目开发（3-4小时）+ 周总结（1小时）</li> </ul> <p><strong>月度4：基础工作流程与游戏框架</strong></p> <ul> <li><strong>Unreal焦点</strong>：编辑器熟悉、蓝图系统、基础游戏框架</li> <li><strong>Defold焦点</strong>：编辑器熟悉、Lua脚本、游戏对象系统</li> <li><strong>周末项目</strong>： <ul> <li>Unreal：创建3D角色控制原型</li> <li>Defold：创建2D精灵动画与控制</li> </ul> </li> </ul> <p><strong>月度5：游戏系统与交互</strong></p> <ul> <li><strong>Unreal焦点</strong>：材质系统、物理交互、基础AI</li> <li><strong>Defold焦点</strong>：碰撞系统、输入处理、游戏状态管理</li> <li><strong>周末项目</strong>： <ul> <li>Unreal：实现简单战斗系统</li> <li>Defold：创建平台跳跃游戏关卡</li> </ul> </li> </ul> <p><strong>月度6：视觉效果与游戏体验</strong></p> <ul> <li><strong>Unreal焦点</strong>：后处理、粒子系统、光照效果</li> <li><strong>Defold焦点</strong>：GUI系统、粒子效果、动画状态机</li> <li><strong>周末项目</strong>： <ul> <li>Unreal：环境场景与特效展示</li> <li>Defold：完整UI系统与游戏流程</li> </ul> </li> </ul> <h4 id="月度7-9unreal与defold进阶"><strong>月度7-9：Unreal与Defold进阶</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>将高级渲染技术应用于工作项目</li> <li>研究VSG性能优化策略</li> </ul> <p><strong>工作日晚间与周末：</strong></p> <ul> <li>继续并行学习模式</li> <li>着重于项目开发而非纯学习</li> </ul> <p><strong>月度7：高级游戏功能</strong></p> <ul> <li><strong>Unreal焦点</strong>：C++与蓝图结合、自定义组件</li> <li><strong>Defold焦点</strong>：自定义着色器、高级游戏系统</li> <li><strong>周末项目</strong>：各自项目功能扩展</li> </ul> <p><strong>月度8：性能优化与多平台支持</strong></p> <ul> <li><strong>Unreal焦点</strong>：性能分析、LOD系统、优化策略</li> <li><strong>Defold焦点</strong>：移动平台适配、性能调优</li> <li><strong>周末项目</strong>：性能测试与优化</li> </ul> <p><strong>月度9：完整游戏原型</strong></p> <ul> <li><strong>Unreal与Defold</strong>：完善游戏系统、创建完整游戏循环</li> <li><strong>周末项目</strong>：准备可展示的游戏Demo</li> </ul> <h3 id="第三阶段渲染引擎开发与游戏项目完成"><strong>第三阶段：渲染引擎开发与游戏项目完成</strong></h3> <h4 id="月度10-12自定义渲染技术与游戏融合"><strong>月度10-12：自定义渲染技术与游戏融合</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>深化VSG高级功能研究</li> <li>实验性渲染技术探索</li> </ul> <p><strong>下班后与周末：</strong></p> <ul> <li>开发自定义渲染模块</li> <li>将渲染技术整合到游戏项目中</li> </ul> <p><strong>月度10：Unreal自定义渲染扩展</strong></p> <ul> <li>工作日：研究Unreal渲染架构</li> <li>周末：实现自定义后处理效果和着色器</li> <li><strong>具体实现</strong>：创建自定义后处理材质和着色器，实现特殊视觉效果</li> </ul> <p><strong>月度11：Diligent Engine与游戏引擎集成</strong></p> <ul> <li>工作日：研究渲染引擎与游戏引擎集成方法</li> <li>周末：尝试将Diligent Engine渲染器集成到简单游戏框架</li> <li><strong>具体实现</strong>：创建中间层接口，连接游戏逻辑与Diligent渲染系统</li> </ul> <p><strong>月度12：高级渲染技术实现</strong></p> <ul> <li>工作日：研究最新实时渲染技术论文</li> <li>周末：实现1-2种高级渲染技术</li> <li><strong>具体实现</strong>：基于Diligent Engine实现SSAO、体积光、屏幕空间反射等效果</li> </ul> <h4 id="月度13-15游戏项目深化与完善"><strong>月度13-15：游戏项目深化与完善</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>使用VSG实现高级渲染效果</li> <li>分析工作与个人项目的技术协同点</li> </ul> <p><strong>下班后与周末：</strong></p> <ul> <li>专注于完成一款有特色的游戏项目</li> <li>可以选择Unreal或Defold作为主要平台</li> </ul> <p><strong>月度13-15：游戏开发专注期</strong></p> <ul> <li>选择一个最有前景的游戏原型进行深化</li> <li>每周设定明确的开发目标</li> <li>持续迭代和测试</li> <li><strong>具体实现</strong>：根据选定的游戏类型，完成核心玩法、内容创建、优化和测试</li> </ul> <h4 id="月度16-18整合与作品集建设"><strong>月度16-18：整合与作品集建设</strong></h4> <p><strong>工作时间：</strong></p> <ul> <li>将个人项目中的技术创新点应用到工作项目</li> <li>总结职业技能提升</li> </ul> <p><strong>下班后与周末：</strong></p> <ul> <li>完善游戏项目并准备发布</li> <li>整理技术文档和作品集</li> </ul> <p><strong>月度16-18：发布准备与下一步规划</strong></p> <ul> <li>游戏测试与优化</li> <li>准备发布材料</li> <li>技术博客或文档整理</li> <li>规划长期职业发展方向</li> </ul> <h2 id="对每周学习安排的建议"><strong>对每周学习安排的建议</strong></h2> <h3 id="避免倦怠的策略"><strong>避免倦怠的策略</strong></h3> <ol> <li><strong>分块学习</strong>：将每次学习时间分为25-30分钟的专注块，中间休息5分钟</li> <li><strong>交替主题</strong>：图形学理论学习后切换到实践编码</li> <li><strong>进度可视化</strong>：使用看板或进度追踪工具记录成就</li> </ol> <h3 id="高效学习的工作日示例"><strong>高效学习的工作日示例</strong></h3> <ul> <li><strong>早上</strong>： <ul> <li>到办公室前15分钟：阅读技术博客</li> <li>工作时间（1小时）：VSG源码分析，记录笔记</li> </ul> </li> <li><strong>中午</strong>： <ul> <li>午休：观看20分钟教程视频</li> </ul> </li> <li><strong>下午</strong>： <ul> <li>工作时间（1小时）：将学到的VSG知识应用到工作项目</li> </ul> </li> <li><strong>晚上</strong>： <ul> <li>19:00-20:00：引擎学习（交替Unreal/Defold）</li> <li>20:15-21:15：项目实践</li> <li>21:30-22:00：总结与计划</li> </ul> </li> </ul> <h3 id="高效学习的周末示例"><strong>高效学习的周末示例</strong></h3> <ul> <li><strong>上午</strong>： <ul> <li>9:00-10:30：核心开发时间（无干扰）</li> <li>10:45-12:00：解决技术难点</li> </ul> </li> <li><strong>下午</strong>： <ul> <li>14:00-16:00：扩展功能开发</li> <li>16:15-17:00：测试与修复</li> </ul> </li> <li><strong>晚上</strong>： <ul> <li>19:00-20:00：学习新概念（按需）</li> <li>20:00-21:00：下周规划与总结</li> </ul> </li> </ul> <h2 id="项目里程碑与成果规划"><strong>项目里程碑与成果规划</strong></h2> <h3 id="3个月基础技术掌握"><strong>3个月：基础技术掌握</strong></h3> <ul> <li>Vulkan/图形学基础掌握</li> <li>Diligent Engine入门</li> <li>Unreal与Defold基础熟悉(?)</li> <li><strong>成果</strong>：基础渲染器原型与两个简单游戏Demo</li> </ul> <h3 id="6个月中级技术应用"><strong>6个月：中级技术应用</strong></h3> <ul> <li>Unreal/Defold中级功能掌握</li> <li>自定义渲染技术实现</li> <li>游戏原型迭代</li> <li><strong>成果</strong>：一个有特色的游戏原型和一个渲染技术演示</li> </ul> <h3 id="12个月高级整合"><strong>12个月：高级整合</strong></h3> <ul> <li>引擎与渲染器深度整合</li> <li>完整游戏接近完成</li> <li>高级渲染技术掌握</li> <li><strong>成果</strong>：接近可发布的游戏作品和实用渲染模块</li> </ul> <p><strong>18个月：专业水平（续）</strong></p> <ul> <li>独立游戏发布准备</li> <li>渲染引擎模块成熟</li> <li>技术专长形成</li> <li><strong>成果</strong>：一款可发布的独立游戏、一个高质量渲染引擎模块和专业作品集</li> </ul> <h2 id="国企工作环境的优势利用"><strong>国企工作环境的优势利用</strong></h2> <h3 id="工作时间高效利用"><strong>工作时间高效利用</strong></h3> <ol> <li><strong>创建学习项目文档</strong>：将个人学习伪装成工作研究文档</li> <li><strong>测试用例构建</strong>：构建与工作相关但能测试个人学习概念的测试用例</li> <li><strong>官方培训时间</strong>：申请图形学相关的培训时间</li> </ol> <h3 id="结合工作项目的学习策略"><strong>结合工作项目的学习策略</strong></h3> <ol> <li><strong>渐进式技术引入</strong>：将学到的新技术以解决问题的方式引入工作项目</li> <li><strong>性能优化实践</strong>：用学到的优化知识提升工作项目性能</li> <li><strong>文档完善</strong>：通过编写高质量文档巩固所学知识</li> </ol> <h3 id="合理化个人学习的方法"><strong>合理化个人学习的方法</strong></h3> <ol> <li><strong>技术调研报告</strong>：定期提交与工作相关的技术调研</li> <li><strong>开源项目分析</strong>：分析与工作相关的开源项目（如VSG源码）</li> <li><strong>渲染算法研究</strong>：以提升工作项目为目的研究渲染算法</li> </ol> <h2 id="详细月度计划与具体实现方式"><strong>详细月度计划与具体实现方式</strong></h2> <h3 id="月度1vsg与vulkan基础具体实现方式"><strong>月度1：VSG与Vulkan基础（具体实现方式）</strong></h3> <p><strong>周1-2：VSG架构分析</strong></p> <ul> <li><strong>工作时间</strong>：阅读VSG源码，绘制类图和依赖关系</li> <li><strong>实现方式</strong>：创建VSG核心类的UML图和笔记文档</li> <li><strong>成果物</strong>：VSG架构文档和类关系图</li> </ul> <p><strong>周3-4：Vulkan基本概念</strong></p> <ul> <li><strong>工作时间</strong>：研究VSG如何封装Vulkan API</li> <li><strong>实现方式</strong>：创建小型测试程序，使用纯Vulkan API实现三角形渲染</li> <li><strong>成果物</strong>：基础Vulkan渲染器和VSG封装分析文档</li> </ul> <h3 id="月度2vulkan渲染管线与资源管理具体实现方式"><strong>月度2：Vulkan渲染管线与资源管理（具体实现方式）</strong></h3> <p><strong>周1-2：渲染管线详解</strong></p> <ul> <li><strong>工作时间</strong>：研究VSG如何创建和管理渲染管线</li> <li><strong>实现方式</strong>： <ul> <li>使用Vulkan创建完整图形管线</li> <li>实现顶点和片元着色器</li> <li>设置渲染状态（混合、深度测试等）</li> </ul> </li> <li><strong>成果物</strong>：可自定义渲染管线的小型渲染器</li> </ul> <p><strong>周3-4：资源与内存管理</strong></p> <ul> <li><strong>工作时间</strong>：分析VSG的内存分配策略</li> <li><strong>实现方式</strong>： <ul> <li>实现缓冲区和纹理资源创建</li> <li>创建内存管理器处理资源分配</li> <li>实现资源更新和回收机制</li> </ul> </li> <li><strong>成果物</strong>：资源管理系统和测试用例</li> </ul> <h3 id="月度3计算机图形学与渲染算法具体实现方式"><strong>月度3：计算机图形学与渲染算法（具体实现方式）</strong></h3> <p><strong>周1-2：光栅化与基础着色</strong></p> <ul> <li><strong>实现方式</strong>： <ul> <li>创建软件光栅化器实现三角形绘制</li> <li>实现基础着色模型（Lambert、Blinn-Phong）</li> <li>使用Diligent Engine实现相同效果进行比较</li> </ul> </li> <li><strong>成果物</strong>：光栅化渲染器和着色模型比较</li> </ul> <p><strong>周3-4：纹理系统与光照模型</strong></p> <ul> <li><strong>实现方式</strong>： <ul> <li>实现纹理映射和采样</li> <li>创建基于物理的光照模型</li> <li>在Diligent Engine中实现材质系统</li> </ul> </li> <li><strong>成果物</strong>：材质系统演示程序</li> </ul> <h3 id="月度4unreal与defold入门具体实现方式"><strong>月度4：Unreal与Defold入门（具体实现方式）</strong></h3> <p><strong>Unreal Engine入门</strong></p> <ul> <li><strong>实现方式</strong>： <ul> <li>创建第一人称模板项目</li> <li>自定义角色控制系统</li> <li>实现基础交互机制</li> <li>创建材质和粒子效果</li> </ul> </li> <li><strong>成果物</strong>：可游玩的3D场景原型</li> </ul> <p><strong>Defold入门</strong></p> <ul> <li><strong>实现方式</strong>： <ul> <li>创建2D游戏项目</li> <li>实现精灵动画和控制</li> <li>添加碰撞检测和物理</li> <li>创建简单的游戏循环</li> </ul> </li> <li><strong>成果物</strong>：可游玩的2D游戏原型</li> </ul> <h2 id="阶段性项目规划"><strong>阶段性项目规划</strong></h2> <h3 id="3个月里程碑项目渲染技术基础演示"><strong>3个月里程碑项目：渲染技术基础演示</strong></h3> <p><strong>项目描述</strong>：创建一个渲染技术演示程序，展示Vulkan基础知识和图形学概念。</p> <p><strong>具体实现步骤</strong>：</p> <ol> <li>创建Vulkan渲染器框架（月1-2）</li> <li>实现基础材质系统（月2）</li> <li>添加基本光照模型（月3）</li> <li>创建简单可交互场景（月3）</li> </ol> <p><strong>技术要点</strong>：</p> <ul> <li>Vulkan初始化和渲染循环</li> <li>着色器编译和管理</li> <li>基础PBR材质</li> <li>相机控制和场景管理</li> </ul> <h3 id="6个月里程碑项目游戏原型集合"><strong>6个月里程碑项目：游戏原型集合</strong></h3> <p><strong>项目描述</strong>：创建一个Unreal 3D游戏原型和一个Defold 2D游戏原型。</p> <p><strong>Unreal 3D游戏原型</strong>：</p> <ol> <li>确定游戏类型（如第一人称探索）</li> <li>实现核心游戏机制</li> <li>创建基础关卡</li> <li>添加交互元素和简单AI</li> </ol> <p><strong>Defold 2D游戏原型</strong>：</p> <ol> <li>确定游戏类型（如平台跳跃或弹射物理）</li> <li>实现核心游戏机制</li> <li>创建关卡设计</li> <li>添加UI和游戏循环</li> </ol> <h3 id="12个月里程碑项目渲染增强游戏原型"><strong>12个月里程碑项目：渲染增强游戏原型</strong></h3> <p><strong>项目描述</strong>：将自定义渲染技术与游戏开发结合，创建一个技术特色鲜明的游戏Demo。</p> <p><strong>实现步骤</strong>：</p> <ol> <li>基于前期项目选择最有潜力的游戏原型</li> <li>设计独特的视觉风格需求</li> <li>实现自定义渲染技术（基于Diligent Engine或Unreal扩展）</li> <li>整合到游戏项目中</li> <li>优化性能和视觉效果</li> </ol> <p><strong>技术要点</strong>：</p> <ul> <li>高级着色器效果</li> <li>后处理管线</li> <li>性能优化</li> <li>艺术方向与技术实现的结合</li> </ul> <h3 id="18个月里程碑项目发布就绪的独立游戏"><strong>18个月里程碑项目：发布就绪的独立游戏</strong></h3> <p><strong>项目描述</strong>：完成一款可发布的独立游戏，具有技术和游戏性亮点。</p> <p><strong>实现步骤</strong>：</p> <ol> <li>游戏内容的完成和polish</li> <li>性能优化和兼容性测试</li> <li>用户界面和体验完善</li> <li>准备发布材料和营销内容</li> </ol> <p><strong>成果验收标准</strong>：</p> <ul> <li>稳定运行的游戏构建</li> <li>完整的游戏循环和内容</li> <li>视觉效果和性能达到商业水准</li> <li>准备好的发布材料</li> </ul> <p>###</p>]]></content><author><name></name></author><category term="个人"/><category term="Learn"/><summary type="html"><![CDATA[个人学习计划]]></summary></entry><entry><title type="html">VSG学习笔记</title><link href="https://sherspidey.github.io/blog/2025/VSG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="VSG学习笔记"/><published>2025-03-17T16:50:00+08:00</published><updated>2025-03-17T16:50:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/VSG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/VSG%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"><![CDATA[<h2 id="vsg-qt">VSG-QT</h2> <h3 id="vsgqtwindow">vsgQt::Window</h3> <pre><code class="language-mermaid">mindmap
    root(vsgQt::Window)
        c[vsg::Window]
        c[vsg::Viewer]
            Timer: Render
            Event: Poll from windows
            Request: Permission for rendering
        
</code></pre>]]></content><author><name></name></author><category term="个人"/><category term="VSG"/><category term="Vulkan"/><summary type="html"><![CDATA[个人学习VSG过程中的一些笔记，思维导图为主]]></summary></entry><entry><title type="html">Qt学习积累</title><link href="https://sherspidey.github.io/blog/2025/Qt%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A7%AF%E7%B4%AF/" rel="alternate" type="text/html" title="Qt学习积累"/><published>2025-03-07T15:00:00+08:00</published><updated>2025-03-07T15:00:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/Qt%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A7%AF%E7%B4%AF</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/Qt%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A7%AF%E7%B4%AF/"><![CDATA[<h2 id="关于接口的设计">关于接口的设计</h2> <h3 id="solid原则">SOLID原则</h3>]]></content><author><name></name></author><category term="个人"/><category term="Qt"/><category term="Tread"/><category term="Interface"/><summary type="html"><![CDATA[个人Qt学习过程中的一些笔记]]></summary></entry><entry><title type="html">Vulkan阶段学习笔记</title><link href="https://sherspidey.github.io/blog/2025/Vulkan%E9%98%B6%E6%AE%B5%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="Vulkan阶段学习笔记"/><published>2025-02-24T16:00:00+08:00</published><updated>2025-02-24T16:00:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/Vulkan%E9%98%B6%E6%AE%B5%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/Vulkan%E9%98%B6%E6%AE%B5%E7%AC%94%E8%AE%B0/"><![CDATA[<h2 id="glsl-opengl-vs-vulkan">GLSL: OpenGL VS Vulkan</h2> <p>学习Vulkan的过程，必少不了同样是GLSL，但是一些特征不一样的情况，于是总结如下：</p> <h3 id="opengl">OpenGL</h3> <pre><code class="language-GLSL">// 单层次的uniform系统
uniform mat4 projection;
uniform mat4 modelView;
uniform sampler2D diffuseMap;
</code></pre> <h3 id="vulkan">Vulkan</h3> <pre><code class="language-GLSL">// 两级资源绑定系统：set + binding
layout(set = 0, binding = 0) uniform CameraUBO {...}
layout(set = 1, binding = 0) uniform MaterialUBO {...}
layout(set = 1, binding = 1) uniform sampler2D diffuseMap;
</code></pre> <h3 id="ubo">UBO</h3> <pre><code class="language-GLSL">// Vulkan
layout(set = 0, binding = 0) uniform UBO {  // 显式指定资源位置
    mat4 model;
};

// OpenGL
layout(std140) uniform UBO {  // 只需指定内存布局
    mat4 model;
};
</code></pre> <p>这是因为Vulkan的设计理念是”显式优于隐式”，要求开发者明确指定所有资源的位置和绑定关系</p> <h3 id="性能比较">性能比较</h3> <p><code class="language-plaintext highlighter-rouge">Vulkan push constant &gt; Vulkan/OpenGL UBO &gt; OpenGL 独立uniform变量</code></p> <p><code class="language-plaintext highlighter-rouge">Vulkan push constant</code> 性能最好，因为：</p> <ul> <li>直接通过命令缓冲区传递数据</li> <li>不需要内存分配</li> <li>不需要描述符集</li> <li>数据直接存储在命令缓冲区中</li> </ul> <p>所以，在VSG中，需要频繁更新的P和MV矩阵就被放在<code class="language-plaintext highlighter-rouge">push constant</code>中，但是同时也需要注意其小容量（通常128-256字节）的特点</p>]]></content><author><name></name></author><category term="个人"/><category term="Vulkan"/><category term="Shader"/><summary type="html"><![CDATA[个人学习过程中的一些笔记]]></summary></entry><entry><title type="html">那些巧妙的设计模式</title><link href="https://sherspidey.github.io/blog/2025/%E9%82%A3%E4%BA%9B%E5%B7%A7%E5%A6%99%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="那些巧妙的设计模式"/><published>2025-01-09T15:00:00+08:00</published><updated>2025-01-09T15:00:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/%E9%82%A3%E4%BA%9B%E5%B7%A7%E5%A6%99%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/%E9%82%A3%E4%BA%9B%E5%B7%A7%E5%A6%99%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"><![CDATA[<h2 id="crtp">CRTP</h2> <p>CRTP，全称“Curiously Recurring Template Pattern”（怪异递归模板模式）， 是一种在C++编程中使用模板的设计模式。这种模式看起来有点不寻常，但非常强大和实用。 它的核心思想是：一个类将自己作为模板参数传递给基类。</p> <p>第一次看到这个模式的时候，确实感觉很怪异，毕竟直觉上直接继承可以做到功能，为什么要反其道而行之， 使用模板，破坏代码的可读性呢？但深入了解后才发现他的好处。</p> <p>首先我们来看一下正常继承关系的一个简单示例：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Base.h</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 基类实现</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Derived.h</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">foo</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
        <span class="c1">// 子类实现</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>可以看到，正常情况下，编译器会为每一个带有虚函数的类生成对应的虚函数表，以满足运行时的多态性。</p> <p>然后我们来看一下CRTP是如何做到的：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">Derived</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">interface</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 调用派生类实现的方法</span>
        <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">implementation</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// 派生类必须实现这个方法</span>
    <span class="kt">void</span> <span class="nf">implementation</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 默认实现（如果需要的话）</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">&gt;</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">implementation</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Derived类自己的实现</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Derived implementation"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">d</span><span class="p">.</span><span class="n">interface</span><span class="p">();</span> <span class="c1">// 输出: Derived implementation</span>
<span class="p">}</span>
</code></pre></div></div> <p>这时，CRTP的优点就体验出来，使用模板之后，其提供了一种无需运行时开销的多态性， 因为类型在编译时就已经确定，所以也并不会使用虚函数表，可以减少内存和时间的开销。 除此之外，由于CRTP实现了编译时多态性，编译器可以在编译时进行更多的优化， 如内联展开（inline expansion），这可以显著提高运行时性能。</p> <p>当然，缺点是引入了模板，编译时间增加，代码复杂度增加，调试困难，不是真正的多态等等。</p>]]></content><author><name></name></author><category term="个人"/><category term="Design Pattern"/><category term="Template"/><summary type="html"><![CDATA[个人学习过程中，发现的那些巧妙的设计模式]]></summary></entry><entry><title type="html">Ubuntu常用初始化配置</title><link href="https://sherspidey.github.io/blog/2025/Ubuntu%E5%B8%B8%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="Ubuntu常用初始化配置"/><published>2025-01-02T14:00:00+08:00</published><updated>2025-01-02T14:00:00+08:00</updated><id>https://sherspidey.github.io/blog/2025/Ubuntu%E5%B8%B8%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="https://sherspidey.github.io/blog/2025/Ubuntu%E5%B8%B8%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"><![CDATA[<h2 id="替换国内源">替换国内源</h2> <p>Ubuntu24的源规则已经变动，以下换源规则仅供Ubuntu22参考</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s2">"s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g"</span> /etc/apt/sources.list
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s2">"s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g"</span> /etc/apt/sources.list
</code></pre></div></div> <h2 id="美化终端">美化终端</h2> <p>Ubuntu终端默认使用的命令行解释器(Shell)为bash，虽然稳定、简洁，但日常使用体验对于新手来说并不是很好，故使用zsh。<br/> zsh是一个功能更为先进的shell，可以极大地提升开发者的效率和用户体验，适合那些需要更强大自动补全、命令修正和自定义体验的用户。</p> <h3 id="安装oh-my-zsh">安装Oh-My-Zsh</h3> <p><a href="https://ohmyz.sh/"><strong>Oh-My-Zsh</strong></a>是一款非常好用的Zsh管理框架，并提供多种终端美化主题。</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>zsh <span class="nt">-y</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <h3 id="安装oh-my-zsh插件">安装Oh-My-Zsh插件</h3> <p>插件是提高Oh-My-Zsh效率的真正原因，目前主要使用的插件主要是<code class="language-plaintext highlighter-rouge">zsh-syntax-highlighting</code>与<code class="language-plaintext highlighter-rouge">zsh-autosuggestions</code>。</p> <h4 id="zsh高亮">Zsh高亮</h4> <p>安装高亮插件，实现命令的高亮</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div></div> <h4 id="zsh自动补全">Zsh自动补全</h4> <p>安装自动补全插件，实现历史命令的自动补全</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div></div> <h3 id="配置oh-my-zsh">配置Oh-My-Zsh</h3> <p>编辑<code class="language-plaintext highlighter-rouge">~/.zshrc</code>配置文件，找到并修改</p> <h4 id="修改主题">修改主题</h4> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span>
<span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"agnoster"</span>
</code></pre></div></div> <h4 id="启动插件">启动插件</h4> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>git zsh-syntax-highlighting zsh-autosuggestions<span class="o">)</span>
</code></pre></div></div> <h4 id="隐藏用户名与主机名">隐藏用户名与主机名</h4> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># User configuration</span>
prompt_context<span class="o">(){}</span>
</code></pre></div></div> <h2 id="配置jekyll">配置Jekyll</h2> <h3 id="安装ruby">安装Ruby</h3> <h4 id="安装rvm">安装RVM</h4> <p>导入<strong>GPG</strong>密钥</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg2 <span class="nt">--keyserver</span> hkp://keyserver.ubuntu.com <span class="nt">--recv-keys</span> 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
</code></pre></div></div> <p>遇到网络问题可能会失败，切换为以下命令</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">command </span>curl <span class="nt">-sSL</span> https://rvm.io/mpapis.asc | gpg2 <span class="nt">--import</span> -
<span class="nb">command </span>curl <span class="nt">-sSL</span> https://rvm.io/pkuczynski.asc | gpg2 <span class="nt">--import</span> -
</code></pre></div></div> <p>安装RVM</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sSL</span> https://get.rvm.io | bash <span class="nt">-s</span> stable 
</code></pre></div></div> <h4 id="安装ruby-1">安装Ruby</h4> <p>选择你想要安装的<a href="https://www.ruby-lang.org/en/downloads/">Ruby</a>版本，这里以3.3.6为例</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rvm <span class="nb">install </span>ruby-3.3.6
</code></pre></div></div> <p>安装完成后，如果遇到命令运行出错的情况，请重新安装</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rvm reinstall ruby-3.3.6
</code></pre></div></div> <p><strong>注意</strong>：如果遇到命令找不到的情况，重启终端或者：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> .zshrc 
</code></pre></div></div> <h3 id="安装jekyll">安装Jekyll</h3> <p>安装Jekyll非常简单</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div> <h3 id="其他安装">其他安装</h3> <h4 id="安装jupyter-notebook">安装Jupyter-NoteBook</h4> <p>确保python3以及pip3已经安装，否则执行</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt <span class="nb">install </span>python3 python3-pip
</code></pre></div></div> <p>pip安装Jupyter-NoteBook</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>jupyter
</code></pre></div></div> <p>编辑<code class="language-plaintext highlighter-rouge">~/.zshrc</code>文件，配置添加安装好的包到Path</p> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 具体路径视环境而定</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:</span><span class="nv">$HOME</span><span class="s2">/.local/bin"</span>
</code></pre></div></div> <h4 id="安装nvm与nodejs">安装nvm与NodeJs</h4> <p>安装nvm</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
</code></pre></div></div> <p>安装NodeJs</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="nt">--lts</span>
</code></pre></div></div> <h2 id="终端环境配置">终端环境配置</h2> <h3 id="java-环境配置">Java 环境配置</h3> <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Java 环境切换</span>
setJavaHome<span class="o">()</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nv">$1</span> <span class="k">in
    </span>8<span class="p">)</span>
        <span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>~/Code/Env/Java/jdk1.8.0_401
        <span class="p">;;</span>
    11<span class="p">)</span>
        <span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>~/Code/Env/Java/jdk-11.0.21
        <span class="p">;;</span>
    17<span class="p">)</span>
        <span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>~/Code/Env/Java/jdk-17.0.9
        <span class="p">;;</span>
    21<span class="p">)</span>
        <span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>~/Code/Env/Java/jdk-21.0.1
        <span class="p">;;</span>
    <span class="k">*</span><span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Unsupported Java version: </span><span class="nv">$1</span><span class="s2">"</span>
        <span class="k">return </span>1
    <span class="k">esac

    </span><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/jre
    <span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/lib:<span class="nv">$JRE_HOME</span>/lib:.
    <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/bin:<span class="nv">$JRE_HOME</span>/bin:<span class="nv">$PATH</span>
    <span class="nb">echo</span> <span class="s2">"JAVA_HOME set to </span><span class="nv">$JAVA_HOME</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c">### 默认设置</span>
setJavaHome 8 <span class="o">&gt;</span> /dev/null
</code></pre></div></div>]]></content><author><name></name></author><category term="个人"/><category term="Ubuntu"/><category term="Oh-My-Zsh"/><category term="Jekyll"/><category term="Ruby"/><category term="Java"/><category term="JavaScript"/><summary type="html"><![CDATA[个人常用Ubuntu配置，美化终端，配置环境]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://sherspidey.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T09:59:00+08:00</published><updated>2024-12-04T09:59:00+08:00</updated><id>https://sherspidey.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://sherspidey.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://sherspidey.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T08:32:13+08:00</published><updated>2024-05-01T08:32:13+08:00</updated><id>https://sherspidey.github.io/blog/2024/tabs</id><content type="html" xml:base="https://sherspidey.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="756d1585-587a-4a8d-971e-01b6b44e1c1d" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="756d1585-587a-4a8d-971e-01b6b44e1c1d" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="efc12ad4-27ea-4ab9-9a5f-c60090d810c2" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="efc12ad4-27ea-4ab9-9a5f-c60090d810c2" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="ab38d4c5-9493-4bea-baa9-1178a01ae996" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="ab38d4c5-9493-4bea-baa9-1178a01ae996" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://sherspidey.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-30T07:36:10+08:00</published><updated>2024-04-30T07:36:10+08:00</updated><id>https://sherspidey.github.io/blog/2024/typograms</id><content type="html" xml:base="https://sherspidey.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://sherspidey.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T23:06:00+08:00</published><updated>2024-04-28T23:06:00+08:00</updated><id>https://sherspidey.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://sherspidey.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry></feed>